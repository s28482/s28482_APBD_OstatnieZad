// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using s28482_OstatnieZadaniePunktowane.Data;

#nullable disable

namespace s28482_OstatnieZadaniePunktowane.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250526223816_ADD TABLES AND moredata")]
    partial class ADDTABLESANDmoredata
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("s28482_OstatnieZadaniePunktowane.Models.Doctor", b =>
                {
                    b.Property<int>("IdDoctor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDoctor"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdDoctor");

                    b.ToTable("Doctor");

                    b.HasData(
                        new
                        {
                            IdDoctor = 1,
                            Email = "adam@gmail.com",
                            FirstName = "Adam",
                            LastName = "Adamski"
                        },
                        new
                        {
                            IdDoctor = 2,
                            Email = "barbara.borkowska@medmail.com",
                            FirstName = "Barbara",
                            LastName = "Borkowska"
                        },
                        new
                        {
                            IdDoctor = 3,
                            Email = "cezary.cz@clinic.org",
                            FirstName = "Cezary",
                            LastName = "Czarnecki"
                        },
                        new
                        {
                            IdDoctor = 4,
                            Email = "dorota.dabrowska@healthmail.pl",
                            FirstName = "Dorota",
                            LastName = "Dąbrowska"
                        },
                        new
                        {
                            IdDoctor = 5,
                            Email = "edward.edelman@hospital.net",
                            FirstName = "Edward",
                            LastName = "Edelman"
                        },
                        new
                        {
                            IdDoctor = 6,
                            Email = "franciszek.f@medcenter.com",
                            FirstName = "Franciszek",
                            LastName = "Fijałkowski"
                        });
                });

            modelBuilder.Entity("s28482_OstatnieZadaniePunktowane.Models.Medicament", b =>
                {
                    b.Property<int>("IdMedicament")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMedicament"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdMedicament");

                    b.ToTable("Medicament");

                    b.HasData(
                        new
                        {
                            IdMedicament = 1,
                            Description = "Lek przeciwbólowy i przeciwgorączkowy",
                            Name = "Paracetamol",
                            Type = "Tabletka"
                        },
                        new
                        {
                            IdMedicament = 2,
                            Description = "Antybiotyk z grupy penicylin",
                            Name = "Amoxicillin",
                            Type = "Kapsułka"
                        },
                        new
                        {
                            IdMedicament = 3,
                            Description = "Lek przeciwzapalny i przeciwbólowy",
                            Name = "Ibuprofen",
                            Type = "Tabletka"
                        },
                        new
                        {
                            IdMedicament = 4,
                            Description = "Lek rozszerzający oskrzela",
                            Name = "Salbutamol",
                            Type = "Aerozol"
                        },
                        new
                        {
                            IdMedicament = 5,
                            Description = "Lek stosowany w leczeniu cukrzycy typu 2",
                            Name = "Metformina",
                            Type = "Tabletka"
                        });
                });

            modelBuilder.Entity("s28482_OstatnieZadaniePunktowane.Models.Patient", b =>
                {
                    b.Property<int>("IdPatient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPatient"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdPatient");

                    b.ToTable("Patient");

                    b.HasData(
                        new
                        {
                            IdPatient = 1,
                            BirthDate = new DateTime(1990, 5, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Jan",
                            LastName = "Doe"
                        },
                        new
                        {
                            IdPatient = 2,
                            BirthDate = new DateTime(1985, 3, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Anna",
                            LastName = "Kowalska"
                        },
                        new
                        {
                            IdPatient = 3,
                            BirthDate = new DateTime(1978, 11, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Piotr",
                            LastName = "Nowak"
                        },
                        new
                        {
                            IdPatient = 4,
                            BirthDate = new DateTime(1995, 7, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Maria",
                            LastName = "Wiśniewska"
                        },
                        new
                        {
                            IdPatient = 5,
                            BirthDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Tomasz",
                            LastName = "Lewandowski"
                        },
                        new
                        {
                            IdPatient = 6,
                            BirthDate = new DateTime(1992, 10, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Ewa",
                            LastName = "Zielińska"
                        });
                });

            modelBuilder.Entity("s28482_OstatnieZadaniePunktowane.Models.Prescription", b =>
                {
                    b.Property<int>("IdPrescription")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPrescription"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdDoctor")
                        .HasColumnType("int");

                    b.Property<int>("IdPatient")
                        .HasColumnType("int");

                    b.HasKey("IdPrescription");

                    b.HasIndex("IdDoctor");

                    b.HasIndex("IdPatient");

                    b.ToTable("Prescription");

                    b.HasData(
                        new
                        {
                            IdPrescription = 1,
                            Date = new DateTime(2024, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DueDate = new DateTime(2025, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdDoctor = 2,
                            IdPatient = 1
                        },
                        new
                        {
                            IdPrescription = 2,
                            Date = new DateTime(2025, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DueDate = new DateTime(2025, 2, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdDoctor = 4,
                            IdPatient = 3
                        },
                        new
                        {
                            IdPrescription = 3,
                            Date = new DateTime(2025, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DueDate = new DateTime(2025, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdDoctor = 1,
                            IdPatient = 5
                        },
                        new
                        {
                            IdPrescription = 4,
                            Date = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DueDate = new DateTime(2025, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdDoctor = 6,
                            IdPatient = 2
                        });
                });

            modelBuilder.Entity("s28482_OstatnieZadaniePunktowane.Models.PrescriptionMedicament", b =>
                {
                    b.Property<int>("IdMedicament")
                        .HasColumnType("int")
                        .HasColumnName("IdMedicament");

                    b.Property<int>("IdPrescription")
                        .HasColumnType("int")
                        .HasColumnName("IdPrescription");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Dose")
                        .HasColumnType("int")
                        .HasColumnName("Dose");

                    b.HasKey("IdMedicament", "IdPrescription");

                    b.HasIndex("IdPrescription");

                    b.ToTable("PrescriptionMedicament");

                    b.HasData(
                        new
                        {
                            IdMedicament = 1,
                            IdPrescription = 1,
                            Details = "1 tabletka co 8 godzin",
                            Dose = 500
                        },
                        new
                        {
                            IdMedicament = 3,
                            IdPrescription = 1,
                            Details = "1 tabletka rano i wieczorem",
                            Dose = 200
                        },
                        new
                        {
                            IdMedicament = 2,
                            IdPrescription = 2,
                            Details = "2 kapsułki dziennie przez 7 dni",
                            Dose = 250
                        },
                        new
                        {
                            IdMedicament = 4,
                            IdPrescription = 3,
                            Details = "Stosować w razie duszności"
                        },
                        new
                        {
                            IdMedicament = 5,
                            IdPrescription = 4,
                            Details = "1 tabletka dziennie przed śniadaniem",
                            Dose = 850
                        },
                        new
                        {
                            IdMedicament = 1,
                            IdPrescription = 4,
                            Details = "W razie bólu głowy",
                            Dose = 500
                        });
                });

            modelBuilder.Entity("s28482_OstatnieZadaniePunktowane.Models.Prescription", b =>
                {
                    b.HasOne("s28482_OstatnieZadaniePunktowane.Models.Doctor", "Doctor")
                        .WithMany("Prescriptions")
                        .HasForeignKey("IdDoctor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("s28482_OstatnieZadaniePunktowane.Models.Patient", "Patient")
                        .WithMany("Prescriptions")
                        .HasForeignKey("IdPatient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("s28482_OstatnieZadaniePunktowane.Models.PrescriptionMedicament", b =>
                {
                    b.HasOne("s28482_OstatnieZadaniePunktowane.Models.Medicament", "Medicament")
                        .WithMany("PrescriptionMedicaments")
                        .HasForeignKey("IdMedicament")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("s28482_OstatnieZadaniePunktowane.Models.Prescription", "Prescription")
                        .WithMany("PrescriptionMedicaments")
                        .HasForeignKey("IdPrescription")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicament");

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("s28482_OstatnieZadaniePunktowane.Models.Doctor", b =>
                {
                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("s28482_OstatnieZadaniePunktowane.Models.Medicament", b =>
                {
                    b.Navigation("PrescriptionMedicaments");
                });

            modelBuilder.Entity("s28482_OstatnieZadaniePunktowane.Models.Patient", b =>
                {
                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("s28482_OstatnieZadaniePunktowane.Models.Prescription", b =>
                {
                    b.Navigation("PrescriptionMedicaments");
                });
#pragma warning restore 612, 618
        }
    }
}
